// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package echo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EchoReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoReply) Reset()         { *m = EchoReply{} }
func (m *EchoReply) String() string { return proto.CompactTextString(m) }
func (*EchoReply) ProtoMessage()    {}
func (*EchoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_08134aea513e0001, []int{1}
}

func (m *EchoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoReply.Unmarshal(m, b)
}
func (m *EchoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoReply.Marshal(b, m, deterministic)
}
func (m *EchoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoReply.Merge(m, src)
}
func (m *EchoReply) XXX_Size() int {
	return xxx_messageInfo_EchoReply.Size(m)
}
func (m *EchoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoReply.DiscardUnknown(m)
}

var xxx_messageInfo_EchoReply proto.InternalMessageInfo

func (m *EchoReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echo.EchoRequest")
	proto.RegisterType((*EchoReply)(nil), "echo.EchoReply")
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_08134aea513e0001) }

var fileDescriptor_08134aea513e0001 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x99, 0x8c, 0xe9, 0xb2, 0x83, 0x18, 0x99, 0x96, 0xaa, 0xa8, 0x15, 0xc1, 0x83, 0xa4,
	0x9b, 0xb2, 0x8b, 0xb7, 0x09, 0x82, 0xa0, 0x30, 0xd8, 0x6e, 0x5e, 0x24, 0xeb, 0x3e, 0xd3, 0x40,
	0x9a, 0x2f, 0xa6, 0x5d, 0xa1, 0x88, 0x17, 0xff, 0x82, 0xff, 0x6a, 0x57, 0xff, 0x81, 0xf8, 0x43,
	0xa4, 0xed, 0x0a, 0x11, 0xbc, 0x7d, 0xed, 0xf7, 0xe4, 0x7d, 0xf3, 0xbe, 0x21, 0x04, 0xa2, 0x18,
	0x99, 0xb1, 0x98, 0x21, 0x6d, 0x97, 0xb3, 0x7f, 0x28, 0x10, 0x85, 0x82, 0x90, 0x1b, 0x19, 0x72,
	0xad, 0x31, 0xe3, 0x99, 0x44, 0x9d, 0xd6, 0x8c, 0x7f, 0xb6, 0xde, 0x2a, 0xd4, 0xc2, 0x2e, 0xb5,
	0x96, 0x5a, 0x84, 0x68, 0xc0, 0xfe, 0x81, 0xf6, 0x1d, 0x89, 0x48, 0x49, 0xd0, 0xd9, 0x7a, 0x71,
	0xec, 0x2c, 0x5e, 0x24, 0xa8, 0xc5, 0xf3, 0x1c, 0x62, 0x9e, 0x4b, 0xb4, 0x35, 0x10, 0x9c, 0x92,
	0xde, 0x5d, 0x14, 0xe3, 0x14, 0x5e, 0x97, 0x90, 0x66, 0x94, 0x92, 0xb6, 0xe6, 0x09, 0x78, 0xad,
	0x93, 0xd6, 0x45, 0x77, 0x5a, 0xcd, 0xc1, 0x39, 0xe9, 0xd6, 0x88, 0x51, 0x05, 0xf5, 0xc8, 0x66,
	0x02, 0x69, 0xca, 0x45, 0xc3, 0x34, 0x9f, 0x57, 0xdf, 0x2d, 0x42, 0x4a, 0x6e, 0x06, 0x36, 0x07,
	0x4b, 0x1f, 0xc8, 0xd6, 0x8c, 0x17, 0xf7, 0xa0, 0x14, 0xd2, 0x1d, 0x56, 0x85, 0x76, 0x8c, 0xfc,
	0x6d, 0xf7, 0x97, 0x51, 0x45, 0x70, 0xf0, 0xf1, 0xf5, 0xf3, 0xb9, 0xd1, 0xa7, 0xbb, 0x61, 0x3e,
	0x0c, 0x53, 0x5e, 0xc4, 0xe5, 0xc9, 0xf0, 0xad, 0xbc, 0xc1, 0x3b, 0x4d, 0x48, 0xaf, 0x11, 0x7b,
	0x9c, 0x4e, 0xfe, 0xd3, 0x3b, 0x62, 0x75, 0x52, 0xe6, 0xf4, 0xc4, 0x26, 0x4d, 0x4f, 0xc1, 0xe5,
	0x6a, 0xdc, 0x73, 0x62, 0x54, 0x5e, 0x1e, 0xdd, 0x73, 0xbd, 0x94, 0x6d, 0xec, 0x7c, 0x6f, 0x35,
	0xee, 0x0b, 0x6b, 0x22, 0xb6, 0xc0, 0x84, 0x4b, 0xcd, 0x22, 0x4c, 0x6e, 0x46, 0x83, 0xc1, 0x68,
	0x78, 0xdb, 0x79, 0xaa, 0xde, 0x6c, 0xde, 0xa9, 0xda, 0xbb, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0xd3, 0xb0, 0x53, 0x4b, 0xce, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServerClient is the client API for EchoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServerClient interface {
	SayHello(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
	SayHelloLRO(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type echoServerClient struct {
	cc *grpc.ClientConn
}

func NewEchoServerClient(cc *grpc.ClientConn) EchoServerClient {
	return &echoServerClient{cc}
}

func (c *echoServerClient) SayHello(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, "/echo.EchoServer/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServerClient) SayHelloLRO(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/echo.EchoServer/SayHelloLRO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServerServer is the server API for EchoServer service.
type EchoServerServer interface {
	SayHello(context.Context, *EchoRequest) (*EchoReply, error)
	SayHelloLRO(context.Context, *EchoRequest) (*longrunning.Operation, error)
}

// UnimplementedEchoServerServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServerServer struct {
}

func (*UnimplementedEchoServerServer) SayHello(ctx context.Context, req *EchoRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedEchoServerServer) SayHelloLRO(ctx context.Context, req *EchoRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloLRO not implemented")
}

func RegisterEchoServerServer(s *grpc.Server, srv EchoServerServer) {
	s.RegisterService(&_EchoServer_serviceDesc, srv)
}

func _EchoServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoServer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServerServer).SayHello(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoServer_SayHelloLRO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServerServer).SayHelloLRO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.EchoServer/SayHelloLRO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServerServer).SayHelloLRO(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoServer",
	HandlerType: (*EchoServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _EchoServer_SayHello_Handler,
		},
		{
			MethodName: "SayHelloLRO",
			Handler:    _EchoServer_SayHelloLRO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}
